import React, { use, useState } from 'react';
import KnnResultChart from '../Chart/KnnResultChart'
import { Button, Stack, TextField, Container, Box, Divider} from '@mui/material';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';
import { createTheme, ThemeProvider } from '@mui/material/styles';

function euclideanDistance(a, b) {
  return Math.sqrt(
    a.reduce((sum, val, i) => sum + Math.pow(val - b[i], 2), 0)
  );
}

function knnPredict(input, dataset, k) {
  const distances = dataset.map((item) => ({
    ...item,
    distance: euclideanDistance(input, [item.x1, item.x2])
  }));

  const neighbors = distances.sort((a, b) => a.distance - b.distance).slice(0, k);
  const votes = neighbors.reduce((acc, cur) => {
    acc[cur.y] = (acc[cur.y] || 0) + 1;
    return acc;
  }, {});

  const predicted = Object.entries(votes).reduce((a, b) => (a[1] > b[1] ? a : b))[0];
  return predicted;
}

export default function TrainKnn() {
  const [dataset, setDataset] = useState([]);
  const [x1, setX1] = useState('');
  const [x2, setX2] = useState('');
  const [y, setY] = useState('');
  const [testX1, setTestX1] = useState('');
  const [testX2, setTestX2] = useState('');
  const [k, setK] = useState('');
  const [blockKnn, setBlockKnn] = useState(false);
  const [prediction, setPrediction] = useState(null);
  const [openEx, setOpenEx] = useState(false);
  const font = { fontFamily: 'Prompt', fontWeight: 400, fontSize: '1rem'};
  const datasetKnn = [
        { x1: 1, x2: 2, y: 0 },
        { x1: 2, x2: 1, y: 0 },
        { x1: 2.5, x2: 3, y: 1 },
        { x1: 3, x2: 2.5, y: 1 },
        { x1: 4, x2: 4, y: 1 },
        { x1: 1.5, x2: 1.8, y: 0 },
        { x1: 3.5, x2: 3.2, y: 1 },
        { x1: 0.5, x2: 2.2, y: 0 }
    ]

  const handleAdd = () => {
    const numX1 = parseFloat(x1);
    const numX2 = parseFloat(x2);
    const numY = parseInt(y);
    if (!isNaN(numX1) && !isNaN(numX2) && (numY === 0 || numY === 1)) {
      setDataset([...dataset, { x1: numX1, x2: numX2, y: numY }]);
      setX1('');
      setX2('');
      setY('');
    } else {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡∏∞ y ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1');
    }
  };

  const headCellStyle = {
        backgroundColor: '#e3f2fd',
        color: '#0d47a1',
        fontWeight: 'bold',
        fontFamily: 'Prompt',
        fontSize: '1.5rem',
  };

  const tableStyle = {
    fontFamily: 'Prompt',
    fontSize:'1.4rem'
  }

  const exModel = () => {
    if(openEx === false){
      setOpenEx(true)
    } else {
      setOpenEx(false)
    }
  }

  function getRandomFloat(min, max) {
    return Math.random() * (max - min) + min;
  }

  const handleDataTest = () => {

    setDataset(datasetKnn);
    setBlockKnn(true)
  }

  const cl = () => {
    setBlockKnn(false);
    setDataset([])
    setX1('');
    setX2('');
    setY('');
    setTestX1('');
    setTestX2('');
    setK('');
    setPrediction(null);
  }

  const handlePredict = () => {
    if(k%2 !== 0){
        const input = [parseFloat(testX1), parseFloat(testX2)];
        const result = knnPredict(input, dataset, parseInt(k));
        setPrediction(result);
    } else {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡∏∞ K ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà');
    }
  };

  return (
    <Container maxWidth="xl" sx={{ py: 4, fontFamily: 'Prompt', fontWeight: 400 }}>
        <Box sx={{ fontFamily: 'Prompt', mt: 4, mb: 6 }}>
        <h2 style={{ fontWeight: 'bold', fontSize: '3rem', color: '#000' }}>
          ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á K-Nearest Neighbors (K-NN)
        </h2>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          K-NN ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Classification) ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤ (Regression)
          ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô <strong>k ‡∏à‡∏∏‡∏î</strong>
          ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å (Majority Vote)
        </p>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å k ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏î
          ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏î ‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô
        </p>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          <strong>‡∏™‡∏°‡∏Å‡∏≤‡∏£:</strong> ‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á (Euclidean distance) ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
          <br />
          <code>d(p, q) = ‚àö((x‚ÇÅ·µñ - x‚ÇÅ·µ†)¬≤ + (x‚ÇÇ·µñ - x‚ÇÇ·µ†)¬≤)</code>
          <br />‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å (Majority Vote) ‡∏à‡∏≤‡∏Å <strong>k ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô</strong> ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤ <code>y</code>
        </p>

        <TableContainer component={Paper} sx={{ maxWidth: 700, my: 2 ,fontFamily: 'Prompt'}}>
          <Table size='medium'>
            <TableHead>
              <TableRow sx={{ backgroundColor: '#e3f2fd' }}>
                <TableCell sx={headCellStyle}><strong>‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£</strong></TableCell>
                <TableCell sx={headCellStyle}><strong>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</strong></TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell sx={tableStyle}><code>x‚ÇÅ, x‚ÇÇ</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (features)</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>k</code></TableCell>
                <TableCell sx={tableStyle}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>d</code></TableCell>
                <TableCell sx={tableStyle}>‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô Euclidean distance)</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>y</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (0 ‡∏´‡∏£‡∏∑‡∏≠ 1)</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>

        <p style={{ fontSize: '1.5rem', marginTop: '1.5rem' }}>
          K-NN ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ù‡∏∂‡∏Å (non-parametric) ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        </p>

        <Divider
          sx={{
          my: 4,
          borderColor: 'grey.400',
          borderBottomWidth: 3,
          }}
          textAlign="left"
        ></Divider>
      </Box>
      <div style={{ padding: '2rem', fontFamily: 'Prompt', fontWeight: 400 }}>
        <h1 style={{ fontSize: '3rem', marginTop: '0.5rem' }}>K-NN Classifier</h1>

        <Button variant='contained' onClick={exModel} sx={{ fontSize: '1.2rem' , fontFamily: 'Prompt'}}>Show Explanation</Button>

        {openEx === true ? <div style={{ padding: '2rem', fontFamily: 'Prompt',background:'#F6F3F3' }}>
          <h2 style={{ fontWeight: 'bold', fontSize: '2rem', color: '#1976d2' }}>
            üìò ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô K-NN Interactive Classifier
          </h2>

          <p style={{ marginTop: '1rem', fontSize: '1.4rem' }}>
            ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á <strong>‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° K-Nearest Neighbors (K-NN)</strong> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Å‡∏•‡∏∏‡πà‡∏°
            ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
          </p>

          <h3 style={{ marginTop: '1.5rem', fontSize: '1.5rem' }}>üìå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
          <ol style={{ paddingLeft: '1.5rem', fontSize: '1.5rem' }}>
            <li><strong style={{ color:'#1976d2' }}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ <code>x‚ÇÅ</code>, <code>x‚ÇÇ</code>, ‡πÅ‡∏•‡∏∞ <code>y</code> (0 ‡∏´‡∏£‡∏∑‡∏≠ 1) ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î <em>‚ÄúAdd Data‚Äù</em> ‡∏´‡∏£‡∏∑‡∏≠ <em>‚ÄúLoad Sample Data‚Äù</em></li>
            <li><strong style={{ color:'#1976d2' }}>‡∏õ‡πâ‡∏≠‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏ô <code>x‚ÇÅ</code>, <code>x‚ÇÇ</code> ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ <code>k</code> (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà)</li>
            <li><strong style={{ color:'#1976d2' }}>‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚Äú‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1</li>
            <li><strong style={{ color:'#1976d2' }}>‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü</li>
            <li><strong style={{ color:'#1976d2' }}>‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Å‡∏î <em>‚ÄúReset‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà</li>
          </ol>

          <h3 style={{ marginTop: '1.5rem', fontSize: '1.5rem' }}>üìà ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á:</h3>
          <ul style={{ paddingLeft: '1.5rem', fontSize: '1.5rem' }}>
            <li><strong>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:</strong> ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° 0 ‡∏´‡∏£‡∏∑‡∏≠ 1</li>
            <li><strong>‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≥‡πÅ‡∏ô‡∏Å:</strong> ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á Class 0 ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Class 1) ‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏™‡∏µ‡πÄ‡πÄ‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ô‡∏≤‡∏ô)‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô </li>
          </ul>

          <p style={{ marginTop: '1rem', fontSize: '0.95rem' }}>
            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ K-NN ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Instance-based Learning) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ <code>k</code> ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏™‡∏°‡∏≠
          </p>
        </div> : ''}

        <h3 style={{ fontSize: '2rem'}} >‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏ô (x1, x2, y)</h3>

        <Stack spacing={2} direction="row">
          <TextField id="outlined-basic" label="x1" variant="outlined" type="number" step="any" value={x1} onChange={e => setX1(e.target.value)}/>
          <TextField id="outlined-basic" label="x2" variant="outlined" type="number" step="any" value={x2} onChange={e => setX2(e.target.value)}/>
          <TextField id="outlined-basic" label="y (0 or 1)" variant="outlined" type="number" inputProps={{ min: 0, max: 1 }} value={y} onChange={e => setY(e.target.value)} sx={{ minWidth: '150px'}}/>
          <Button onClick={handleAdd} variant='contained' sx={font}>Add Data</Button>
          <Button onClick={handleDataTest} variant='contained' sx={font}>Load Sample Data</Button>
        </Stack>

        <h4 style={{ fontSize: '2rem'}}>üìã Dataset</h4>
        <TableContainer component={Paper} sx={{ width: '100%', maxWidth: '600px', mb: 4 , fontSize:'2rem'}}>
              <Table>
                <TableHead>
                  {dataset.length !== 0 ? 
                  <TableRow>
                    <TableCell sx={headCellStyle} >x1</TableCell>
                    <TableCell sx={headCellStyle} >x2</TableCell>
                    <TableCell sx={headCellStyle} >y</TableCell>
                  </TableRow> 
                  : ''}
                </TableHead>
                <TableBody>
                  {dataset.map((d, i) => (
                    <TableRow key={i}>
                      <TableCell>{d.x1}</TableCell>
                      <TableCell>{d.x2}</TableCell>
                      <TableCell>{d.y}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
        </TableContainer>

        <h3 style={{ fontSize: '2rem'}}>üß™ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà</h3>

        <Stack spacing={2} direction="row">
          <TextField id="outlined-basic" label="x1 ‡∏ó‡∏î‡∏™‡∏≠‡∏ö" variant="outlined" type="number" step="any" value={testX1} onChange={e => setTestX1(e.target.value)}/>
          <TextField id="outlined-basic" label="x2 ‡∏ó‡∏î‡∏™‡∏≠‡∏ö" variant="outlined" type="number" step="any" value={testX2} onChange={e => setTestX2(e.target.value)}/>
          <TextField id="outlined-basic" label="k (‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)" variant="outlined" type="number" step="any" value={k} onChange={e => {
                const val = e.target.value;
                if (val === '') {
                setK('');
                return;
                }

                const num = parseInt(val);
                if (!isNaN(num) && num % 2 === 1) {
                setK(num);
                }
          }}/>
          <Button onClick={handlePredict} disabled={blockKnn === false || testX1 === '' || testX2 === '' || k === ''} variant='contained' sx={font}>üöÄ Train Model</Button>
          <Button onClick={cl} variant='contained' sx={font} color="error">Reset</Button>
        </Stack>

        {prediction !== null && (
          <>
              <h4 style={{ fontSize: '2rem'}}>üìå ‡∏à‡∏∏‡∏î ({testX1},{testX2}) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Class {prediction}</h4>
              <KnnResultChart
                  dataset={dataset}
                  testPoint={{ x1: parseFloat(testX1), x2: parseFloat(testX2) }}
                  prediction={prediction}
              />
          </>
        )}
      </div>
    </Container>
  );
}
