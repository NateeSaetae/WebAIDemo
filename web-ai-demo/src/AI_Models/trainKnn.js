import React, { useState } from 'react';
import KnnResultChart from '../Chart/KnnResultChart'
import { Button, Stack, TextField } from '@mui/material';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';
import { createTheme, ThemeProvider } from '@mui/material/styles';

function euclideanDistance(a, b) {
  return Math.sqrt(
    a.reduce((sum, val, i) => sum + Math.pow(val - b[i], 2), 0)
  );
}

function knnPredict(input, dataset, k) {
  const distances = dataset.map((item) => ({
    ...item,
    distance: euclideanDistance(input, [item.x1, item.x2])
  }));

  const neighbors = distances.sort((a, b) => a.distance - b.distance).slice(0, k);
  const votes = neighbors.reduce((acc, cur) => {
    acc[cur.y] = (acc[cur.y] || 0) + 1;
    return acc;
  }, {});

  const predicted = Object.entries(votes).reduce((a, b) => (a[1] > b[1] ? a : b))[0];
  return predicted;
}

export default function TrainKnn() {
  const [dataset, setDataset] = useState([]);
  const [x1, setX1] = useState('');
  const [x2, setX2] = useState('');
  const [y, setY] = useState('');
  const [testX1, setTestX1] = useState('');
  const [testX2, setTestX2] = useState('');
  const [k, setK] = useState('');
  const [blockKnn, setBlockKnn] = useState(false);
  const [prediction, setPrediction] = useState(null);
  const font  = { fontFamily: 'Prompt',fontWeight: 400};
  const datasetKnn = [
        { x1: 1, x2: 2, y: 0 },
        { x1: 2, x2: 1, y: 0 },
        { x1: 2.5, x2: 3, y: 1 },
        { x1: 3, x2: 2.5, y: 1 },
        { x1: 4, x2: 4, y: 1 },
        { x1: 1.5, x2: 1.8, y: 0 },
        { x1: 3.5, x2: 3.2, y: 1 },
        { x1: 0.5, x2: 2.2, y: 0 }
    ]

  const handleAdd = () => {
    const numX1 = parseFloat(x1);
    const numX2 = parseFloat(x2);
    const numY = parseInt(y);
    if (!isNaN(numX1) && !isNaN(numX2) && (numY === 0 || numY === 1)) {
      setDataset([...dataset, { x1: numX1, x2: numX2, y: numY }]);
      setX1('');
      setX2('');
      setY('');
    } else {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡∏∞ y ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1');
    }
  };

  const headCellStyle = {
        backgroundColor: '#e3f2fd',
        color: '#0d47a1',
        fontWeight: 'bold',
        fontFamily: 'Prompt'
  };

  function getRandomFloat(min, max) {
    return Math.random() * (max - min) + min;
  }

  const handleDataTest = () => {
    setDataset(datasetKnn);
    setBlockKnn(true)
  }

  const cl = () => {
    setBlockKnn(false);
    setDataset([])
    setX1('');
    setX2('');
    setY('');
    setTestX1('');
    setTestX2('');
    setK('');
    setPrediction(null);
  }

  const handlePredict = () => {
    if(k%2 !== 0){
        const input = [parseFloat(testX1), parseFloat(testX2)];
        const result = knnPredict(input, dataset, parseInt(k));
        setPrediction(result);
    } else {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡∏∞ K ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà');
    }
  };

  return (
    <div style={{ padding: '2rem', fontFamily: 'Prompt', fontWeight: 400 }}>
      <h1>üîç K-NN Classifier</h1>

      <div style={{ padding: '2rem', fontFamily: 'Prompt' }}>
        <h2 style={{ fontWeight: 'bold', fontSize: '1.6rem', color: '#1976d2' }}>
          üìò ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô K-NN Interactive Classifier
        </h2>

        <p style={{ marginTop: '1rem', fontSize: '1rem' }}>
          ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á <strong>K-Nearest Neighbors (K-NN)</strong> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        </p>

        <h3 style={{ marginTop: '1.5rem', fontSize: '1.2rem' }}>üìå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
        <ol style={{ paddingLeft: '1.5rem', fontSize: '1rem' }}>
          <li><strong>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å:</strong> ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ <code>x1</code>, <code>x2</code> ‡πÅ‡∏•‡∏∞ <code>y</code> (0 ‡∏´‡∏£‡∏∑‡∏≠ 1) ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î <em>‚ÄúAdd Data Point‚Äù</em></li>
          <li><strong>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:</strong> ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• <code>x1</code> ‡πÅ‡∏•‡∏∞ <code>x2</code> ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏≤ <code>k</code> (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà)</li>
          <li><strong>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚ÄúPredict‚Äù:</strong> ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î <code>k</code> ‡∏à‡∏∏‡∏î</li>
          <li><strong>‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:</strong> ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô</li>
        </ol>

        <h3 style={{ marginTop: '1.5rem', fontSize: '1.2rem' }}>üß† ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á:</h3>
        <ul style={{ paddingLeft: '1.5rem', fontSize: '1rem' }}>
          <li>‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á <strong>Euclidean Distance</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</li>
          <li>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Instance-based Learning)</li>
          <li>‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å (Majority Vote) ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</li>
        </ul>

        <h3 style={{ marginTop: '1.5rem', fontSize: '1.2rem' }}>üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</h3>
        <ul style={{ paddingLeft: '1.5rem', fontSize: '1rem' }}>
          <li>‡∏Ñ‡πà‡∏≤ <code>k</code> ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏™‡∏°‡∏≠</li>
          <li>‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡∏°‡∏¥‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</li>
        </ul>
      </div>

      <h3 style={{ fontSize: '2rem'}} >‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏ô (x1, x2, y)</h3>

      <Stack spacing={2} direction="row">
        <TextField id="outlined-basic" label="x1" variant="outlined" type="number" step="any" value={x1} onChange={e => setX1(e.target.value)}/>
        <TextField id="outlined-basic" label="x2" variant="outlined" type="number" step="any" value={x2} onChange={e => setX2(e.target.value)}/>
        <TextField id="outlined-basic" label="y (0 or 1)" variant="outlined" type="number" inputProps={{ min: 0, max: 1 }} value={y} onChange={e => setY(e.target.value)} sx={{ minWidth: '150px'}}/>
        <Button onClick={handleAdd} variant='contained' sx={font}>Add Data Point</Button>
        <Button onClick={handleDataTest} variant='contained' sx={font}>Load Sample Data</Button>
      </Stack>

      <h4 style={{ fontSize: '2rem'}}>üìã Dataset</h4>
      <TableContainer component={Paper} style={{ width: '100%', maxWidth: '400px', marginBottom: '50px'}}>
            <Table>
              <TableHead>
                {dataset.length !== 0 ? 
                <TableRow>
                  <TableCell sx={headCellStyle} >x1</TableCell>
                  <TableCell sx={headCellStyle} >x2</TableCell>
                  <TableCell sx={headCellStyle} >y</TableCell>
                </TableRow> 
                : ''}
              </TableHead>
              <TableBody>
                {dataset.map((d, i) => (
                  <TableRow key={i}>
                    <TableCell>{d.x1}</TableCell>
                    <TableCell>{d.x2}</TableCell>
                    <TableCell>{d.y}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
      </TableContainer>

      <h3 style={{ fontSize: '2rem'}}>üß™ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà</h3>

      <Stack spacing={2} direction="row">
        <TextField id="outlined-basic" label="x1 ‡∏ó‡∏î‡∏™‡∏≠‡∏ö" variant="outlined" type="number" step="any" value={testX1} onChange={e => setTestX1(e.target.value)}/>
        <TextField id="outlined-basic" label="x2 ‡∏ó‡∏î‡∏™‡∏≠‡∏ö" variant="outlined" type="number" step="any" value={testX2} onChange={e => setTestX2(e.target.value)}/>
        <TextField id="outlined-basic" label="k (‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)" variant="outlined" type="number" step="any" value={k} onChange={e => {
              const val = e.target.value;
              if (val === '') {
              setK('');
              return;
              }

              const num = parseInt(val);
              if (!isNaN(num) && num % 2 === 1) {
              setK(num);
              }
        }}/>
        <Button onClick={handlePredict} disabled={blockKnn === false || testX1 === '' || testX2 === ''} variant='contained' sx={font}>Predict</Button>
        <Button onClick={cl} variant='contained' sx={font}>Reset</Button>
      </Stack>

      {prediction !== null && (
        <>
            <h4 style={{ fontSize: '2rem'}}>üìå ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: y = {prediction}</h4>
            <KnnResultChart
                dataset={dataset}
                testPoint={{ x1: parseFloat(testX1), x2: parseFloat(testX2) }}
                prediction={prediction}
            />
        </>
      )}
    </div>
  );
}