import React, { useState } from 'react';
import * as math from 'mathjs';
import { Button, Stack, TextField, Container, Box, Divider } from '@mui/material';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';
import OlsResultChart from '../Chart/OlsResultChart'

export default function OlsRegressionApp() {
  const [dataset, setDataset] = useState([]);
  const [x1, setX1] = useState('');
  const [y, setY] = useState('');
  const [weights, setWeights] = useState(null);
  const [mse, setMse] = useState(null);
  const [openEx, setOpenEx] = useState(false);
  const font = { fontFamily: 'Prompt', fontWeight: 400 };
  const dataTest = [
    { x1: 1, y: 3.5 },
    { x1: 2, y: 5.0 },
    { x1: 3, y: 6.8 },
    { x1: 4, y: 9.2 },
    { x1: 5, y: 11.1 },
    { x1: 6, y: 13.0 },
];

  const handleAdd = () => {
    const dx1 = parseFloat(x1);
    const dy = parseFloat(y);
    if (!isNaN(dx1) && !isNaN(dy)) {
      setDataset(prev => [...prev, { x1: dx1, y: dy }]);
      setX1(''); setY('');
    } else {
      alert('‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    }
  };

  const handleTrainOLS = () => {
    if (dataset.length < 2) {
      alert('‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ä‡∏∏‡∏î');
      return;
    }

    const X = dataset.map(d => [1, d.x1]);
    const Y = dataset.map(d => [d.y]);

    try {
      const XT = math.transpose(X);
      const XTX = math.multiply(XT, X);
      const XTX_inv = math.inv(XTX);
      const XTY = math.multiply(XT, Y);
      const W = math.multiply(XTX_inv, XTY);

      setWeights(W.map(w => w[0]));

      const predictions = X.map(row => math.dot(row, W.map(w => w[0])));
      const errors = predictions.map((pred, i) => pred - Y[i][0]);
      const mseVal = errors.reduce((sum, e) => sum + e ** 2, 0) / errors.length;
      setMse(mseVal.toFixed(4));
    } catch (error) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OLS');
      setWeights(null);
      setMse(null);
    }
  };

  const cl = () => {
    setDataset([]);
    setX1('');
    setY('');
    setWeights(null);
    setMse(null);
  };

  const handleTest = () => {
    setDataset(dataTest)
  }

  const exModel = () => {
    if(openEx === false){
      setOpenEx(true)
    } else {
      setOpenEx(false)
    }
  }

  return (
    <Container maxWidth="xl" sx={{ py: 4, fontFamily: 'Prompt', fontWeight: 400 }}>
      <Box sx={{ fontFamily: 'Prompt', mt: 4, mb: 6 }}>
        <h2 style={{ fontWeight: 'bold', fontSize: '3rem', color: '#000' }}>
          ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Ordinary Least Squares (OLS)
        </h2>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          OLS ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô (Linear Regression) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á (Sum of Squared Errors)
          ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </p>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          <strong>‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:</strong><br />
          <code>y = w‚ÇÅx‚ÇÅ + b</code><br />
          ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà w‚ÇÅ ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (slope) ‡πÅ‡∏•‡∏∞ b ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ bias (intercept)
        </p>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ <code>‚àë(yÃÇ - y)¬≤</code> ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (yÃÇ ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)
          ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå:
        </p>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          <code>w = (X·µÄX)<sup>-1</sup>X·µÄy</code>
        </p>

        <Divider sx={{ my: 4, borderColor: 'grey.400', borderBottomWidth: 3 }} />
      </Box>

      <div style={{ padding: '2rem', fontFamily: 'Prompt', fontWeight: 400 }}>
        <h1>üìä OLS Linear Regression Trainer</h1>
        <Button variant='contained' onClick={exModel} sx={{ fontSize: '1.2rem' , fontFamily: 'Prompt'}}>Show Explanation</Button>

        {openEx === true ? <div style={{ padding: '.1rem', fontFamily: 'Prompt',background:'#F6F3F3' }}>
          <h2 style={{ fontWeight: 'bold', fontSize: '2rem', color: '#1976d2' }}>
            üìê ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OLS Linear Regression Trainer
          </h2>

          <p style={{ marginTop: '1rem', fontSize: '1.4rem' }}>
            ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á <strong>‡∏Å‡∏≤‡∏£‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô (Linear Regression)</strong> ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
            <strong> OLS (Ordinary Least Squares)</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á <code>y</code> ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πâ‡∏ô <code>x‚ÇÅ</code>
          </p>

          <h3 style={{ marginTop: '1.5rem', fontSize: '1.5rem' }}>üìå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
          <ol style={{ paddingLeft: '1.5rem', fontSize: '1.5rem' }}>
            <li>
              <strong style={{ color: '#1976d2' }}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ <code>x‚ÇÅ</code> ‡πÅ‡∏•‡∏∞ <code>y</code> ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúAdd Data‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà dataset
            </li>
            <li>
              <strong style={{ color: '#1976d2' }}>‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•:</strong> ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ä‡∏∏‡∏î ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúüöÄ Train Model‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏Å‡∏≤‡∏£
            </li>
            <li>
              <strong style={{ color: '#1976d2' }}>‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ <strong>Bias (b)</strong>, <strong>Weight (w‚ÇÅ)</strong> ‡πÅ‡∏•‡∏∞ <strong>Mean Squared Error (MSE)</strong>
            </li>
            <li>
              <strong style={{ color: '#1976d2' }}>‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúReset‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á dataset ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
            </li>
          </ol>

          <p style={{ marginTop: '1rem', fontSize: '1rem' }}>
            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô ‡πÅ‡∏•‡∏∞ x‚ÇÅ ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
          </p>
        </div> : ''}

        <h3 style={{ fontSize: '2rem' }}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (x1, y)</h3>
        <Stack spacing={2} direction="row">
          <TextField label="x1" variant="outlined" type="number" step="any" value={x1} onChange={e => setX1(e.target.value)} />
          <TextField label="y" variant="outlined" type="number" value={y} onChange={e => setY(e.target.value)} sx={{ maxWidth: '150px' }} />
          <Button onClick={handleAdd} variant='contained' sx={font}>Add Data</Button>
          <Button onClick={handleTest} variant='contained' sx={font}>Load Sample Data</Button>
        </Stack>

        <h4 style={{ fontSize: '2rem' }}>üìã Dataset</h4>
        <TableContainer component={Paper} style={{ width: '100%', maxWidth: '400px', marginBottom: '50px' }}>
          <Table>
            <TableHead>
              {dataset.length !== 0 && (
                <TableRow>
                  <TableCell sx={{ fontWeight: 'bold', fontFamily: 'Prompt' }}>x1</TableCell>
                  <TableCell sx={{ fontWeight: 'bold', fontFamily: 'Prompt' }}>y</TableCell>
                </TableRow>
              )}
            </TableHead>
            <TableBody>
              {dataset.map((d, i) => (
                <TableRow key={i}>
                  <TableCell>{d.x1}</TableCell>
                  <TableCell>{d.y}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>

        <Stack spacing={2} direction="row">
          <Button onClick={handleTrainOLS} disabled={dataset.length <= 1} variant='contained' sx={font}>üöÄ Train Model</Button>
          <Button onClick={cl} variant='contained' color="error" sx={font}>Reset</Button>
        </Stack>

        {weights && (
          <Box mt={4}>
            <h3>‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</h3>
            <p><strong>Bias (b):</strong> {weights[0].toFixed(4)}</p>
            <p><strong>Weight w1:</strong> {weights[1].toFixed(4)}</p>
            <p><strong>MSE:</strong> {mse}</p>
            <OlsResultChart data={dataset} />
          </Box>
        )}
      </div>
    </Container>
  );
}
