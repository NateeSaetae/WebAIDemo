import React, { useState } from 'react';
import * as math from 'mathjs';
import { Button, Stack, TextField, Container, Box, Divider} from '@mui/material';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';
import { createTheme, ThemeProvider } from '@mui/material/styles';

export default function OlsRegressionApp() {
  const [dataset, setDataset] = useState([]);
  const [x1, setX1] = useState('');
  const [x2, setX2] = useState('');
  const [y, setY] = useState('');
  const [weights, setWeights] = useState(null);
  const [mse, setMse] = useState(null);
  const [openEx, setOpenEx] = useState(false);
  const font = { fontFamily: 'Prompt', fontWeight: 400, fontSize: '1rem'};
  const dataTest = [
    { x1: 1, x2: 2, y: 5 },
    { x1: 2, x2: 4, y: 9 },
    { x1: 3, x2: 1, y: 7 },
    { x1: 4, x2: 3, y: 10 },
    { x1: 5, x2: 0, y: 8 },
  ];

  const handleAdd = () => {
    const dx1 = parseFloat(x1);
    const dx2 = parseFloat(x2);
    const dy = parseFloat(y);
    if (!isNaN(dx1) && !isNaN(dx2) && !isNaN(dy)) {
      setDataset(prev => [...prev, { x1: dx1, x2: dx2, y: dy }]);
      setX1(''); setX2(''); setY('');
    } else {
      alert('‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    }
  };

  const headCellStyle = {
        backgroundColor: '#e3f2fd',
        color: '#0d47a1',
        fontWeight: 'bold',
        fontFamily: 'Prompt',
        fontSize: '1.5rem',
  };

  const tableStyle = {
    fontFamily: 'Prompt',
    fontSize:'1.4rem'
  }

  const cl = () => {
    setDataset([]);
    setX1('');
    setX2('');
    setY('');
    setWeights('')
  }

  const handleTest = () => {
    setDataset(dataTest)
  }

  const exModel = () => {
    if(openEx === false){
      setOpenEx(true)
    } else {
      setOpenEx(false)
    }
  }

  const handleTrainOLS = () => {
    if (dataset.length < 2) {
      alert('‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ä‡∏∏‡∏î');
      return;
    }

    const X = dataset.map(d => [1, d.x1, d.x2]); // 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bias term
    const Y = dataset.map(d => [d.y]);

    const XT = math.transpose(X);
    const XTX = math.multiply(XT, X);
    const XTX_inv = math.inv(XTX);
    const XTY = math.multiply(XT, Y);
    const W = math.multiply(XTX_inv, XTY); // [b, w1, w2]

    setWeights(W.map(w => w[0]));

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ MSE (Mean Squared Error)
    const predictions = X.map(row => math.dot(row, W.map(w => w[0])));
    const errors = predictions.map((pred, i) => pred - Y[i][0]);
    const mseVal = errors.reduce((sum, e) => sum + e ** 2, 0) / errors.length;
    setMse(mseVal.toFixed(4));
  };

  return (
    <Container maxWidth="xl" sx={{ py: 4, fontFamily: 'Prompt', fontWeight: 400 }}>

      <Box sx={{ fontFamily: 'Prompt', mt: 4, mb: 6 }}>
        <h2 style={{ fontWeight: 'bold', fontSize: '3rem', color: '#000' }}>
          ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Ordinary Least Squares (OLS)
        </h2>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          OLS ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô (Linear Regression) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á (Sum of Squared Errors)
          ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </p>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          <strong>‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:</strong><br />
          <code>y = w‚ÇÅx‚ÇÅ + w‚ÇÇx‚ÇÇ + b</code><br />
          ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà w‚ÇÅ, w‚ÇÇ ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (slope) ‡πÅ‡∏•‡∏∞ b ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ bias (intercept)
        </p>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ <code>‚àë(yÃÇ - y)¬≤</code> ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (yÃÇ ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)
          ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå:
        </p>

        <p style={{ fontSize: '1.5rem', marginTop: '1rem' }}>
          <code>w = (X·µÄX)<sup>-1</sup>X·µÄy</code>
        </p>

        <TableContainer component={Paper} sx={{ maxWidth: 700, my: 2, fontFamily: 'Prompt' }}>
          <Table size='medium'>
            <TableHead>
              <TableRow sx={{ backgroundColor: '#e3f2fd' }}>
                <TableCell sx={{ fontWeight: 'bold', fontSize: '1.5rem', fontFamily: 'Prompt', color: '#0d47a1' }}>‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£</TableCell>
                <TableCell sx={{ fontWeight: 'bold', fontSize: '1.5rem', fontFamily: 'Prompt', color: '#0d47a1' }}>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell sx={tableStyle}><code>x‚ÇÅ, x‚ÇÇ</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏™‡∏£‡∏∞ (Independent Variables)</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>y</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Dependent Variable)</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>w</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ x ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>b</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (intercept)</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>

        <p style={{ fontSize: '1.5rem', marginTop: '1.5rem' }}>
          OLS ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ô Machine Learning
        </p>

        <Divider
          sx={{
            my: 4,
            borderColor: 'grey.400',
            borderBottomWidth: 3,
          }}
          textAlign="left"
        />
      </Box>
      <div style={{ padding: '2rem', fontFamily: 'Prompt', fontWeight: 400 }}>
            <h1>üìä OLS Linear Regression Trainer</h1>
            <Button variant='contained' onClick={exModel} sx={{ fontSize: '1.2rem' , fontFamily: 'Prompt'}}>Show Explanation</Button>

            {openEx ? <div style={{ padding: '2rem', fontFamily: 'Prompt', background:'#F6F3F3' }}>
              <h2 style={{ fontWeight: 'bold', fontSize: '2rem', color: '#1976d2' }}>
                üìê ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OLS Linear Regression Trainer
              </h2>

              <p style={{ marginTop: '1rem', fontSize: '1.4rem' }}>
                ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á <strong>OLS (Ordinary Least Squares)</strong> ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ñ‡∏î‡∏ñ‡∏≠‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô 
                ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ <code>y</code> ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô <code>x‚ÇÅ</code> ‡πÅ‡∏•‡∏∞ <code>x‚ÇÇ</code> 
                ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
              </p>

              <h3 style={{ marginTop: '1.5rem', fontSize: '1.5rem' }}>üìå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
              <ol style={{ paddingLeft: '1.5rem', fontSize: '1.5rem' }}>
                <li>
                  <strong style={{ color:'#1976d2' }}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ <code>x‚ÇÅ</code>, <code>x‚ÇÇ</code>, ‡πÅ‡∏•‡∏∞ <code>y</code> ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúAdd Data‚Äù</em> ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúLoad Sample Data‚Äù</em>
                </li>
                <li>
                  <strong style={{ color:'#1976d2' }}>‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúTrain Model‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (w‚ÇÅ, w‚ÇÇ) ‡πÅ‡∏•‡∏∞ bias (b) ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                </li>
                <li>
                  <strong style={{ color:'#1976d2' }}>‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÅ‡∏•‡∏∞ <strong>Mean Squared Error (MSE)</strong>
                </li>
                <li>
                  <strong style={{ color:'#1976d2' }}>‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúReset‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
                </li>
              </ol>

              {/*<h3 style={{ marginTop: '1.5rem', fontSize: '1.5rem' }}>üßÆ ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•:</h3>
              <pre style={{ backgroundColor: '#f5f5f5', padding: '1rem', fontSize: '1.3rem', borderRadius: '8px' }}>
                ≈∑ = b + w‚ÇÅ¬∑x‚ÇÅ + w‚ÇÇ¬∑x‚ÇÇ
              </pre>*/}

              <p style={{ fontSize: '1.2rem' }}>
                ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£ <code>W = (X·µÄX)‚Åª¬πX·µÄY</code> ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞ bias ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå
              </p>

              <h3 style={{ marginTop: '1.5rem', fontSize: '1.5rem' }}>üìà ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:</h3>
              <ul style={{ paddingLeft: '1.5rem', fontSize: '1.5rem' }}>
                <li><strong>Bias (b):</strong> ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£</li>
                <li><strong>Weights (w‚ÇÅ, w‚ÇÇ):</strong> ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πâ‡∏ô</li>
                <li><strong>MSE:</strong> ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡∏¢‡∏¥‡πà‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ</li>
              </ul>

              <p style={{ marginTop: '1rem', fontSize: '1rem' }}>
                ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: OLS ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏°‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡∏≤‡∏¢ Data Science
              </p>
            </div> : ''}

        <h3 style={{ fontSize: '2rem'}}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (x1, x2, y)</h3>
        <Stack spacing={2} direction="row">
          <TextField id="outlined-basic" label="x1" variant="outlined" type="number" step="any" value={x1} onChange={e => setX1(e.target.value)}/>
          <TextField id="outlined-basic" label="x2" variant="outlined" type="number" step="any" value={x2} onChange={e => setX2(e.target.value)}/>
          <TextField id="outlined-basic" label="y" variant="outlined" type="number" value={y} onChange={e => setY(e.target.value)} sx={{ maxWidth: '150px'}}/>
          <Button onClick={handleAdd} variant='contained' sx={font}>Add Data</Button>
          <Button onClick={handleTest} variant='contained' sx={font}>Load Sample Data</Button>
          {/*<Button onClick={handleDataTest} variant='contained' sx={font}>üöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á</Button>*/}
        </Stack>

        <h4 style={{ fontSize: '2rem'}}>üìã Dataset</h4>
        <TableContainer component={Paper} style={{ width: '100%', maxWidth: '400px', marginBottom: '50px'}}>
                          <Table>
                            <TableHead>
                              {dataset.length !== 0 ? 
                              <TableRow>
                                <TableCell sx={headCellStyle} >x1</TableCell>
                                <TableCell sx={headCellStyle} >x2</TableCell>
                                <TableCell sx={headCellStyle} >y</TableCell>
                              </TableRow> 
                              : ''}
                            </TableHead>
                            <TableBody>
                              {dataset.map((d, i) => (
                                <TableRow key={i}>
                                  <TableCell>{d.x1}</TableCell>
                                  <TableCell>{d.x2}</TableCell>
                                  <TableCell>{d.y}</TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
        </TableContainer>

        <Stack spacing={2} direction="row">
          <Button onClick={handleTrainOLS} disabled={dataset.length <= 2} variant='contained' sx={font}>üöÄ Train Model</Button>
          <Button onClick={cl} variant='contained' sx={font} color="error">Reset</Button>
        </Stack>

        {weights && (
          <>
            <h3>‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</h3>
            <p><strong>Bias (b):</strong> {weights[0].toFixed(4)}</p>
            <p><strong>Weight w1:</strong> {weights[1].toFixed(4)}</p>
            <p><strong>Weight w2:</strong> {weights[2].toFixed(4)}</p>
            <p><strong>MSE:</strong> {mse}</p>
          </>
        )}
      </div>
    </Container>
  );
}
