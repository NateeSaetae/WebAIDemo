import React, { useState } from 'react';
import ResultChart from '../Chart/ResultChart';
import WeightsChart from '../Chart/WeightsChart';
import { trainPerceptron } from './trainPerceptron';
import { Button, Stack, TextField, Box, Container, Divider } from '@mui/material';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import PerceptronExplanationModal from '../AI_Models/PerceptronExplanationModal'
import DecisionBoundaryChart from '../Chart/PerceptronDiagram'

export default function DisplayPerceptron() {
  const [dataset, setDataset] = useState([]);
  const [x1, setX1] = useState('');
  const [x2, setX2] = useState('');
  const [y, setY] = useState('');
  const [errors, setErrors] = useState([]);
  const [weights, setWeights] = useState([]);
  const [trained, setTrained] = useState(false);
  const [openEx, setOpenEx] = useState(false);
  const [blockInput, setBlockInput] = useState(false);
  const font = { fontFamily: 'Prompt', fontWeight: 400, fontSize: '1rem'};

  const datasetTest = [
    { x1: 1, x2: 1.5, y: 0 },
    { x1: 2, x2: 3.0, y: 1 },
    { x1: 0, x2: 2.2, y: 0 },
    { x1: 3, x2: 4.5, y: 1 },
    { x1: 1, x2: 0.5, y: 0 }
  ];

  const headCellStyle = {
    backgroundColor: '#e3f2fd',
    color: '#0d47a1',
    fontWeight: 'bold',
    fontFamily: 'Prompt',
    fontSize: '1.5rem',
  };

  const tableStyle = {
    fontFamily: 'Prompt',
    fontSize:'1.4rem'
  }

  const theme = createTheme({
    typography: {
      fontFamily: 'Prompt, sans-serif',
    },
  });

  const handleAddData = () => {
    const parsedX1 = parseFloat(x1);
    const parsedX2 = parseFloat(x2);
    const parsedY = parseInt(y);

    if (!isNaN(parsedX1) && !isNaN(parsedX2) && (parsedY === 0 || parsedY === 1)) {
      const newPoint = { x1: parsedX1, x2: parsedX2, y: parsedY };
      setDataset([...dataset, newPoint]);
      setX1('');
      setX2('');
      setY('');
      setTrained(false);
    } else {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å x1, x2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞ y ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
    }
  };

  const handleTrain = () => {
    const result = trainPerceptron(dataset, 0.1, 50);
    setErrors(result.errorsPerEpoch);
    setWeights(result.weightsPerEpoch);
    setTrained(true);
  };

  const handleTrainTest = () => {
    setDataset(datasetTest);
    setBlockInput(true);
  };

  const cl = () => {
    setDataset([]);
    setErrors([]);
    setWeights([]);
    setBlockInput(false);
    setTrained(false);
    setX1('');
    setX2('');
    setY('');
  };

  const exModel = () => {
    if(openEx === false){
      setOpenEx(true)
    } else {
      setOpenEx(false)
    }
  }

  return (
    <Container maxWidth="xl" sx={{ py: 4, fontFamily: 'Prompt', fontWeight: 400 }}>
      <Box sx={{ fontFamily: 'Prompt', mt: 4, mb: 6 }}>
        <h2 style={{ fontWeight: 'bold', fontSize: '3rem', color: '#000' }}>‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Perceptron</h2>
        <p style={{ fontSize: '1.5rem', marginTop: '0.5rem'}}>
          Perceptron ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Machine Learning ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (Binary Classification)
          ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° 0 ‡∏´‡∏£‡∏∑‡∏≠ 1
        </p>
        <p style={{ fontSize: '1.5rem', marginTop: '0.5rem' }}>
          <strong>‡∏™‡∏°‡∏Å‡∏≤‡∏£ Percptron</strong>
          <br />
          <code>y = f(w‚ÇÅx‚ÇÅ + w‚ÇÇx‚ÇÇ + b)</code>
          <br />
          <TableContainer component={Paper} sx={{ maxWidth: 700, my: 2 ,fontFamily: 'Prompt'}}>
          <Table size="medium">
            <TableHead>
              <TableRow>
                <TableCell sx={headCellStyle}>‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£</TableCell>
                <TableCell sx={headCellStyle}>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell sx={tableStyle}><code>x‚ÇÅ, x‚ÇÇ</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (features)</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>w‚ÇÅ, w‚ÇÇ</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (weights)</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>b</code></TableCell>
                <TableCell sx={tableStyle}>‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (bias)</TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={tableStyle}><code>f</code></TableCell>
                <TableCell sx={tableStyle}>‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (‡πÄ‡∏ä‡πà‡∏ô step function)</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
        </p>
        <p style={{ fontSize: '1.5rem', marginTop: '0.5rem' }}>
          ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á <code>w</code> ‡πÅ‡∏•‡∏∞ <code>b</code> ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (error) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        </p>
        <Divider
          sx={{
            my: 4,
            borderColor: 'grey.400',
            borderBottomWidth: 3,
          }}
          textAlign="left"
        ></Divider>
      </Box>

      <h1 style={{ fontSize: '3rem', marginTop: '0.5rem' }}>Perceptron Interactive Trainer</h1>
      <Button variant='contained' onClick={exModel} sx={{ fontSize: '1.2rem' , fontFamily: 'Prompt'}}>Show Explanation</Button>
      { openEx === true ? <div style={{ padding: '2rem', fontFamily: 'Prompt', background:'#F6F3F3' }}>
        <h2 style={{ fontWeight: 'bold', fontSize: '2rem', color: '#1976d2' }}>
          ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Perceptron Interactive Trainer
        </h2>

        <p style={{ marginTop: '1rem', fontSize: '1.4rem' }}>
          ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á <strong>‡πÇ‡∏°‡πÄ‡∏î‡∏• Perceptron</strong> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Å‡∏•‡∏∏‡πà‡∏° (0‡∏´‡∏£‡∏∑‡∏≠ 1)
          ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ
        </p>

        <h3 style={{ marginTop: '1.5rem', fontSize: '1.5rem' }}>üìå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
        <ol style={{ paddingLeft: '1.5rem', fontSize: '1.5rem' }}>
          <li><strong style={{ color:'#1976d2'}}>‡∏õ‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á <code>x‚ÇÅ</code>, <code>x‚ÇÇ</code> ‡πÅ‡∏•‡∏∞ <code>y</code> (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1) ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúAdd Data Point‚Äù</em> ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúLoad Sample Data‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ</li>
          <li><strong style={{ color:'#1976d2'}}>‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúTrain Model‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ weights</li>
          <li><strong style={{ color:'#1976d2'}}>‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü Error ‡πÅ‡∏•‡∏∞ Weights per Epoch</li>
          <li><strong style={{ color:'#1976d2'}}>‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</strong> ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúLoad Sample Data‚Äù</em></li>
          <li><strong style={{ color:'#1976d2'}}>‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <em>‚ÄúReset‚Äù</em> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà</li>
        </ol>

        <h3 style={{ marginTop: '1.5rem', fontSize: '1.5rem' }}>üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</h3>
        <ul style={{ paddingLeft: '1.5rem', fontSize: '1.5rem' }}>
          <li><strong>Error per Epoch:</strong> ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö</li>
          <li><strong>Weights over Epochs:</strong> ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å</li>
        </ul>

        <p style={{ marginTop: '1rem', fontSize: '0.95rem' }}>
          ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Learning Rate = <code>0.1</code> ‡πÅ‡∏•‡∏∞ Epoch = <code>50</code> ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Step Function ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        </p>
      </div> : ''}

      <h3 style={{ fontSize: '2rem' }}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (x1, x2, y)</h3>
      <Stack spacing={2} direction="row">
        <TextField id="outlined-basic" label="x1" variant="outlined" type="number" step="any" value={x1} onChange={e => setX1(e.target.value)} />
        <TextField id="outlined-basic" label="x2" variant="outlined" type="number" step="any" value={x2} onChange={e => setX2(e.target.value)} />
        <TextField id="outlined-basic" label="y (0 or 1)" variant="outlined" type="number" inputProps={{ min: 0, max: 1 }} value={y} onChange={e => setY(e.target.value)} sx={{ minWidth: '150px' }} />
        <Button onClick={handleAddData} disabled={blockInput === true} variant='contained' sx={font}>Add Data Point</Button>
        <Button onClick={handleTrainTest} variant='contained' sx={font}>Load Sample Data</Button>
      </Stack>

      <h4 style={{ fontSize: '2rem' }}>Dataset</h4>

      <TableContainer component={Paper} sx={{ width: '100%', maxWidth: '600px', mb: 4 , fontSize:'2rem'}}>
        <Table>
          <TableHead>
            {dataset.length !== 0 && (
              <TableRow>
                <TableCell sx={headCellStyle}>x1</TableCell>
                <TableCell sx={headCellStyle}>x2</TableCell>
                <TableCell sx={headCellStyle}>y</TableCell>
              </TableRow>
            )}
          </TableHead>
          <TableBody>
            {dataset.map((d, i) => (
              <TableRow key={i}>
                <TableCell>{d.x1}</TableCell>
                <TableCell>{d.x2}</TableCell>
                <TableCell>{d.y}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Stack spacing={2} direction="row">
        <Button onClick={handleTrain} disabled={dataset.length === 0} variant='contained' sx={font}>üöÄ Train Model</Button>
        <Button onClick={cl} variant='contained' sx={font} color="error">Reset</Button>
      </Stack>

      {trained && (
        <Stack spacing={2} direction="row" sx={{ width: '100%', mt: 4 }}>
          <Box sx={{ flex: 1, minWidth: '800px' }}>
            <h3 style={{ fontSize: '1.5rem' }}>üìà Error per Epoch</h3>
            <ResultChart dataPoints={errors} />
          </Box>
          <Box sx={{ flex: 1, minWidth: '800px' }}>
            <h3 style={{ fontSize: '1.5rem' }}>üìä Weights over Epochs</h3>
            <WeightsChart weightsPerEpoch={weights} />
          </Box>
          <Box sx={{ flex: 1, minWidth: '800px' }}>
            <h3 style={{ fontSize: '1.5rem' }}>üìä Weights over Epochs</h3>
            <DecisionBoundaryChart
              dataPoints={dataset}
              weights={weights[weights.length - 1]} // ‡πÉ‡∏ä‡πâ weight ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            />
          </Box>
        </Stack>
      )}
    </Container>
  );
}